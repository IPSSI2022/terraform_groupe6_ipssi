J'ai pu constater que dans les security group de la console, il y a bien Groupe6.

On voit que j'ai 2 msg d erreur, 1 qui me dit que le group6 est deja cree (normal, car effectue lors de mes premiers tests, et l 'autre message: region non disponible pour le service / invalid'...)

C:\terraform\APP>terraform apply
var.aws_security_group
  Security Group

  Enter a value: group6

module.public_ip.aws_security_group.security_group: Refreshing state... [id=sg-018b2cab353bedfa8]
module.public_ip.aws_eip.public_ip: Refreshing state... [id=eipalloc-0876b32dd35296226]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # null_resource.install_nginx will be created
  + resource "null_resource" "install_nginx" {
      + id = (known after apply)
    }

  # module.ebs_volume.aws_ebs_volume.ebs_volume will be created
  + resource "aws_ebs_volume" "ebs_volume" {
      + arn               = (known after apply)
      + availability_zone = "us-east-1"
      + encrypted         = (known after apply)
      + final_snapshot    = false
      + id                = (known after apply)
      + iops              = (known after apply)
      + kms_key_id        = (known after apply)
      + size              = 10
      + snapshot_id       = (known after apply)
      + tags              = {
          + "Name" = "EBS Volume"
        }
      + tags_all          = {
          + "Name" = "EBS Volume"
        }
      + throughput        = (known after apply)
      + type              = (known after apply)
    }

  # module.ec2_instance.aws_instance.ec2_instance will be created
  + resource "aws_instance" "ec2_instance" {
      + ami                                  = "ami-053b0d53c279acc90"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "groupe6-keys"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "group6"
        }
      + tags_all                             = {
          + "Name" = "group6"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + ebs_block_device {
          + delete_on_termination = true
          + device_name           = "/dev/sdf"
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.security_group.aws_security_group.security_group6 will be created
  + resource "aws_security_group" "security_group6" {
      + arn                    = (known after apply)
      + description            = "Security Group for EC2 instance"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "Groupe6"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

Plan: 4 to add, 0 to change, 0 to destroy.
╷
│ Warning: Argument is deprecated
│
│   with module.public_ip.aws_eip.public_ip,
│   on modules\public_ip\main.tf line 9, in resource "aws_eip" "public_ip":
│    9:   vpc = true
│
│ use domain attribute instead
│
│ (and one more similar warning elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.ebs_volume.aws_ebs_volume.ebs_volume: Creating...
module.security_group.aws_security_group.security_group6: Creating...
╷
│ Error: creating EBS Volume: InvalidZone.NotFound: The zone 'us-east-1' does not exist.
│       status code: 400, request id: 1d4f3c78-fe20-4ed3-b2d6-0ceba643f153
│
│   with module.ebs_volume.aws_ebs_volume.ebs_volume,
│   on modules\ebs_volume\main.tf line 3, in resource "aws_ebs_volume" "ebs_volume":
│    3: resource "aws_ebs_volume" "ebs_volume" {
│
╵
╷
│ Error: creating Security Group (Groupe6): InvalidGroup.Duplicate: The security group 'Groupe6' already exists for VPC 'vpc-040252406360fcb3f'
│       status code: 400, request id: 323eb575-5202-49f7-8e6a-1a44de88ca99
│
│   with module.security_group.aws_security_group.security_group6,
│   on modules\security_group\main.tf line 3, in resource "aws_security_group" "security_group6":
│    3: resource "aws_security_group" "security_group6" {
│
╵

#dilhangunes